{"version":3,"sources":["2-features/5-modal/Modal.module.css","2-features/2-profile/Profile.module.css","1-main/1-ui/header/Header.module.css","1-main/1-ui/common/Pagination.module.css","2-features/1-auth/2-signUp/sign-up-common/CustomNavLink/CustomNavLink.module.css","1-main/1-ui/App.module.css","2-features/1-auth/2-signUp/sign-up-common/SuperInputText/SuperInputText.tsx","2-features/1-auth/2-signUp/sign-up-common/SuperButton/SuperButton.tsx","2-features/1-auth/2-signUp/sign-up-common/SuperCheckbox/SuperCheckbox.tsx","2-features/0-test/Test.tsx","2-features/1-auth/2-signUp/sign-up-common/Error404/Error404.tsx","1-main/3-dal/loginAPI.ts","1-main/3-dal/profileAPI.ts","1-main/2-bll/profileReducer.ts","1-main/2-bll/authReducer.ts","2-features/1-auth/1-login/Login.tsx","1-main/3-dal/sign-up-api.ts","1-main/2-bll/signUpReducer.ts","2-features/1-auth/2-signUp/SignUp.tsx","2-features/2-profile/1-ProfileCard/ProfileCard.tsx","2-features/2-profile/THead.tsx","1-main/3-dal/packsAPI.ts","1-main/2-bll/packsReducer.ts","2-features/5-modal/Modal.tsx","2-features/5-modal/children/ModalForRemove.tsx","2-features/5-modal/children/ModalForEditing.tsx","2-features/2-profile/TBody.tsx","2-features/2-profile/Table.tsx","2-features/2-profile/Search.tsx","2-features/2-profile/Header.tsx","2-features/2-profile/Range.tsx","2-features/2-profile/Pagination.tsx","1-main/1-ui/common/Preloader.tsx","2-features/2-profile/Profile.tsx","1-main/3-dal/restoreAPI.ts","1-main/2-bll/restoreReducer.ts","2-features/restore/1-resetPassword/ResetPassword.tsx","2-features/restore/2-newPassword/NewPassword.tsx","2-features/restore/1-resetPassword/CheckEmail.tsx","1-main/1-ui/common/RadioOptions.tsx","1-main/1-ui/common/SearchBar.tsx","1-main/1-ui/common/Pagination.tsx","1-main/1-ui/utils/paginationAlgorithm.ts","1-main/1-ui/common/DoubleRange.tsx","1-main/1-ui/common/RangeFilter.tsx","2-features/5-modal/children/ModalWithOneInput.tsx","2-features/3-packs/Packs.tsx","1-main/3-dal/cardsAPI.ts","1-main/2-bll/cardsReducer.ts","1-main/1-ui/utils/formatDate.ts","2-features/5-modal/children/ModalWithTwoInput.tsx","2-features/5-modal/children/ModalForCardEditing.tsx","2-features/3-cards/Cards.tsx","1-main/1-ui/routes/Routes.tsx","2-features/1-auth/2-signUp/sign-up-common/CustomNavLink/CustomNavLink.tsx","1-main/1-ui/header/Header.tsx","1-main/1-ui/routes/UnauthorizedRoutes.tsx","1-main/1-ui/Main.tsx","1-main/1-ui/App.tsx","reportWebVitals.ts","1-main/2-bll/store.ts","index.tsx","2-features/1-auth/1-login/Login.module.css","2-features/restore/Restore.module.css","2-features/3-cards/Cards.module.css","2-features/1-auth/2-signUp/SignUp.module.css","2-features/1-auth/2-signUp/sign-up-common/SuperButton/SuperButton.module.css","2-features/1-auth/2-signUp/sign-up-common/Error404/Error404.module.css","2-features/1-auth/2-signUp/sign-up-common/SuperInputText/SuperInputText.module.css","2-features/1-auth/2-signUp/sign-up-common/SuperCheckbox/SuperCheckbox.module.css","1-main/1-ui/common/SearchBar.module.css"],"names":["module","exports","SuperInputText","React","memo","placeholder","type","onChange","onChangeText","onKeyPress","onEnter","error","spanClassName","className","restProps","console","log","finalSpanClassName","s","group","required","e","currentTarget","value","key","SuperButton","color","finalClassName","default","SuperCheckbox","onChangeChecked","children","finalInputClassName","checkbox","checked","Test","useState","text","setText","showAlert","alert","setChecked","disabled","onClick","Error404","classes","container","main","fof","instance","axios","create","baseURL","withCredentials","authAPI","email","password","rememberMe","post","delete","profileAPI","name","avatar","put","initialState","setUserDataAC","updateUserDataTC","dispatch","then","res","updateUserDataAC","data","updatedUser","catch","userId","isAuth","isLoggedIn","isLoading","isInitialized","isLoggedInChange","setError","setIsLoading","setAuthUserData","Login","useDispatch","useSelector","state","auth","setEmail","setPassword","setRememberMe","to","style","loginBlock","loginList","loginTitle","loginInput","rememberBlock","PATH","RESET_PASSWORD","forgotLink","activeClassName","forgotLincActive","btnBlock","loginData","_id","loginText","SIGN_UP","signUpLink","signUpLinkActive","signUpApi","setSignUpErrorAC","SignUp","signUp","signUpError","confirmPassword","setConfirmPassword","onSignUp","rej","response","signUpTC","signUpContainer","onSubmit","LOGIN","signUpForm","buttonsContainer","ProfileCard","props","editModeAvatar","setEditModeAvatar","editModeName","setEditModeName","setAvatar","setName","profile","onBlur","autoFocus","image","onDoubleClick","src","alt","description","THead","listItem","headers","map","h","packsAPI","queryString","get","cardsPack","packId","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","page","pageCount","pages","queryParams","user_id","packName","min","max","sortPacks","setPacksUserId","id","setPacksNameSearch","setSortPacksByDate","sortOption","getPacksTC","getState","optionalsObj","packs","optionalString","property","concat","finalQueryString","slice","Math","floor","addPackTC","Modal","active","modal","setActive","modalContent","stopPropagation","ModalForRemove","card","find","childrenContainer","fontSize","btnContainer","cancelBtn","setModalActive","saveBtn","action","ModalForEditing","packValue","setPackValue","fieldset","TBody","loggedUserId","deleteModalActive","setDeleteModalActive","editModalActive","setEditModalActive","setPackId","setPackName","items","item","index","lastUpdated","updated","userName","user_name","cardsCount","btn","marginLeft","editPackModalHandler","deletePackTC","updatePackTC","Table","table","Search","Header","title","Range","setValue","range","PaginationTest","pagination","Preloader","Profile","useEffect","sidebar","content","header","footer","restoreAPI","requestData","restoreEmailSendSuccess","newPasswordSuccess","setReceiverEmailAC","changePasswordSuccessAC","success","ResetPassword","restore","emailAddress","setEmailAddress","CHECK_EMAIL","restoreContainer","restoreForm","preventDefault","a","requestObj","from","message","NewPassword","token","useParams","changePasswordSuccess","newPassword","setNewPassword","resetPasswordToken","setNewPasswordTC","CheckEmail","emailOfReceiver","SuperRadio","options","onChangeOption","onChangeCallback","mappedOptions","o","i","SearchBar","searchValue","onChangeSearchValue","onClickSearch","onClickReset","searchOption","setSearchOption","searchOptions","styles","searchInput","RadioOptions","letterInput","Pagination","pageCountArray","setPageCountCallback","setPage","totalItems","currentPage","pageSize","pageCountButtons","pc","random","pagesTotalCount","push","startPage","endPage","maxPages","totalPages","ceil","maxPagesBeforeCurrentPage","maxPagesAfterCurrentPage","startIndex","endIndex","Array","keys","paginate","length","pagesElements","p","pagesFooter","DoubleRange","onChangeRange","step","width","RangeFilter","rangeContainer","minValue","maxValue","onChangeRangeDouble","onClickGradeRangeFilter","ModalWithOneInput","Packs","modalActive","totalPacks","setSearchValue","minCardValue","setMinCardValue","maxCardValue","setMaxCardValue","padding","num1","num2","toString","headerFeatures","sortButtons","setPacksPageCount","setPacksCurrentPage","cardsAPI","cardsPack_id","optionals","initState","cards","queryParamsObject","cardAnswer","cardQuestion","sortCards","cardsTotalCount","packUserId","init","fetchCards","setSortCards","setQuestionSearch","question","setAnswerSearch","answer","fetchCardsTC","addCardTC","formatDate","date","day","month","year","ModalWithTwoInput","questionValue","setQuestionValue","answerValue","setAnswerValue","ModalForCardEditing","Cards","setMinValue","setMaxValue","cardId","setCardId","setQuestion","setAnswer","deleteCard","deleteCardTC","cardsElements","grade","tableContainer","setPageCount","setCurrentPage","editCardTC","PROFILE","PACKS","NEW_PASSWORD","CARDS","TEST","Routes","path","exact","render","CustomNavLink","navLink","UnauthorizedRoutes","Main","App","isInit","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2101c46d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__3L-_f\",\"active\":\"Modal_active__2dcei\",\"modalContent\":\"Modal_modalContent__1rEM3\",\"childrenContainer\":\"Modal_childrenContainer__5TrOR\",\"fieldset\":\"Modal_fieldset__Rd8xM\",\"cancelBtn\":\"Modal_cancelBtn__3pQXN\",\"saveBtn\":\"Modal_saveBtn__2xmPL\",\"btnContainer\":\"Modal_btnContainer__3JP_j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"Profile_page__1ig7T\",\"sidebar\":\"Profile_sidebar__3FVKA\",\"profile\":\"Profile_profile__1ckON\",\"image\":\"Profile_image__3RvGR\",\"name\":\"Profile_name__vWPKS\",\"description\":\"Profile_description__2M_zJ\",\"range\":\"Profile_range__3tOIG\",\"content\":\"Profile_content__2FNVr\",\"header\":\"Profile_header__ykEE7\",\"headerFeatures\":\"Profile_headerFeatures__3M7YB\",\"main\":\"Profile_main__1Dgqn\",\"sortButtons\":\"Profile_sortButtons__3gjqn\",\"listItem\":\"Profile_listItem__2adLH\",\"table\":\"Profile_table__3AEAh\",\"btn\":\"Profile_btn__2S_sp\",\"footer\":\"Profile_footer__3sIyv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2AAZ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagesFooter\":\"Pagination_pagesFooter__1bBAE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navLink\":\"CustomNavLink_navLink__1zMvl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__iX4cl\"};","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './SuperInputText.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperInputTextPropsType = DefaultInputPropsType & {\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n    type?: string\r\n}\r\n\r\nconst SuperInputText: React.FC<SuperInputTextPropsType> = React.memo((\r\n    {\r\n        placeholder, type,\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    console.log(placeholder)\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    //const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${className}`\r\n\r\n    return (\r\n        <div className={s.group}>\r\n            <input\r\n                type={type}\r\n                required\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                // className={finalInputClassName}\r\n                // placeholder={placeholder}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <label>{placeholder}</label>\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default SuperInputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n    color?: 'white' | 'blue' | 'red'\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = React.memo((\r\n    {\r\n        color, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${color ? s[color] : s.default} ${s.default}`\r\n    console.log('SB')\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n})\r\n\r\nexport default SuperButton\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './SuperCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperCheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst SuperCheckbox: React.FC<SuperCheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default SuperCheckbox\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport SuperInputText from \"../1-auth/2-signUp/sign-up-common/SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../1-auth/2-signUp/sign-up-common/SuperButton/SuperButton\";\r\nimport SuperCheckbox from \"../1-auth/2-signUp/sign-up-common/SuperCheckbox/SuperCheckbox\";\r\n\r\n\r\nconst Test = () => {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text)\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n    return (\r\n        <div>\r\n            <h1>test</h1>\r\n            <SuperInputText\r\n                value={text}\r\n                onChangeText={setText}\r\n                onEnter={showAlert}\r\n                error={error}\r\n                // spanClassName={s.testSpanError}\r\n            />\r\n            <SuperButton>\r\n                default\r\n            </SuperButton>\r\n\r\n            <SuperButton disabled>\r\n                disabled\r\n            </SuperButton>\r\n\r\n            <SuperButton\r\n                // red // пропсу с булевым значением не обязательно указывать true\r\n                onClick={showAlert}\r\n            >\r\n                delete {/*// название кнопки попадёт в children*/}\r\n            </SuperButton>\r\n\r\n            <SuperCheckbox\r\n                checked={checked}\r\n                onChangeChecked={setChecked}\r\n            >\r\n                some text\r\n            </SuperCheckbox>\r\n\r\n\r\n            <SuperCheckbox checked={checked} onChange={testOnChange}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","import React from 'react'\r\nimport classes from './Error404.module.css'\r\n\r\nfunction Error404() {\r\n    return (\r\n        <div className={classes.container}>\r\n            <div className={classes.main}>\r\n                <div className={classes.fof}>\r\n                    <h1>Error 404</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404\r\n","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return instance.delete<InfoResponseType>('auth/me')\r\n    },\r\n    me() {\r\n        return instance.post<ResponseType>('auth/me', {})\r\n    },\r\n}\r\n\r\n// types\r\nexport type LoginResponseType = {\r\n    avatar: string,\r\n    created: string,\r\n    deviceTokens: DeviceTokenType [],\r\n    email: string,\r\n    isAdmin: boolean,\r\n    name: string,\r\n    publicCardPacksCount: number,\r\n    rememberMe: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    updated: string,\r\n    verified: boolean,\r\n    __v: number,\r\n    _id: string,\r\n}\r\ntype DeviceTokenType = {\r\n    _id: string,\r\n    device: string,\r\n}\r\nexport type InfoResponseType = {\r\n    info: string,\r\n    error?: string\r\n}\r\nexport type ResponseType = UserType & {\r\n    created: string,\r\n    deviceTokens?: DeviceTokenType [],\r\n    isAdmin: boolean,\r\n    rememberMe: boolean,\r\n    token: string,\r\n    tokenDeathTime: number,\r\n    updated: string,\r\n    verified: boolean,\r\n    error?: string,\r\n}\r\nexport type UserType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar: string,\r\n    publicCardPacksCount: number,\r\n}","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const profileAPI = {\r\n    updateProfile(name: string, avatar: string) {\r\n        return instance.put<UpdateProfileResponseType>(`auth/me`, {name: name, avatar: avatar})\r\n    },\r\n}\r\n\r\n// types\r\nexport type UpdateProfileResponseType = {\r\n    updatedUser: {\r\n        name: string\r\n        avatar: string\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {profileAPI} from \"../3-dal/profileAPI\";\r\n\r\nconst initialState: initialStateType = {\r\n    name: '',\r\n    avatar: ''\r\n}\r\n\r\nexport const profileReducer = (state: initialStateType = initialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"SET-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                name: action.name,\r\n                avatar: action.avatar,\r\n            }\r\n        }\r\n        case \"SET-UPDATED-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                name: action.name,\r\n                avatar: action.avatar,\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setUserDataAC = (name: string, avatar: string) => ({type: 'SET-USER-DATA', name, avatar} as const)\r\nexport const updateUserDataAC = (name: string, avatar: string) => ({type: 'SET-UPDATED-USER-DATA', name, avatar} as const)\r\n\r\n// thunks\r\nexport const updateUserDataTC = (name: string, avatar: string) => (dispatch: Dispatch<ActionsType, null>) => {\r\n    profileAPI.updateProfile(name, avatar)\r\n        .then((res) => {\r\n            dispatch(updateUserDataAC(res.data.updatedUser.name, res.data.updatedUser.avatar))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n\r\n// types\r\ntype initialStateType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\ntype ActionsType = SetUserDataActionType | UpdateUserDataActionType\r\n\r\nexport type SetUserDataActionType = ReturnType<typeof setUserDataAC>\r\ntype UpdateUserDataActionType = ReturnType<typeof updateUserDataAC>\r\n","import {authAPI} from '../3-dal/loginAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {setUserDataAC, SetUserDataActionType} from \"./profileReducer\";\r\n\r\n\r\nconst initialState = {\r\n    userId: '',\r\n    email: '',\r\n    isAuth: false,\r\n    isLoggedIn: false,\r\n    error: '',\r\n    isLoading: false,\r\n    isInitialized: false\r\n}\r\n\r\nexport const authReducer = (state = initialState, action: ActionsType): typeof initialState => {\r\n    switch (action.type) {\r\n        case \"IS-LOGGED-IN-CHANGE\": {\r\n            return {\r\n                ...state, isLoggedIn: action.isLoggedIn\r\n            }\r\n        }\r\n        case \"SET-ERROR\": {\r\n            return {\r\n                ...state, error: action.error\r\n            }\r\n        }\r\n        case \"SET-IS-LOADING\": {\r\n            return {\r\n                ...state, isLoading: action.isLoading\r\n            }\r\n        }\r\n        case \"SET-AUTH-USER-DATA\": {\r\n            return {\r\n                ...state,\r\n                userId: action.userId,\r\n                email: action.email,\r\n                isAuth: action.isAuth\r\n            }\r\n        }\r\n        case \"SET-IS-INITIALIZED\": {\r\n            return {...state, isInitialized: action.isInit}\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//AC\r\nexport const isLoggedInChange = (isLoggedIn: boolean) => ({type: 'IS-LOGGED-IN-CHANGE', isLoggedIn}) as const\r\nexport const setError = (error: string) => ({type: 'SET-ERROR', error}) as const\r\nexport const setIsLoading = (isLoading: boolean) => ({type: 'SET-IS-LOADING', isLoading}) as const\r\nexport const setAuthUserData = (userId: string, email: string, isAuth: boolean) => ({\r\n    type: 'SET-AUTH-USER-DATA',\r\n    userId: userId,\r\n    email: email,\r\n    isAuth: isAuth\r\n}) as const\r\nexport const setIsInitialized = (isInit: boolean) => ({type: 'SET-IS-INITIALIZED', isInit}) as const\r\n\r\n//Thunks\r\nexport const loginSuccess = (loginData: LoginDataType) => (dispatch: Dispatch<ActionsType, null>) => {\r\n    dispatch(setIsLoading(true))\r\n    authAPI.login(loginData.email, loginData.password, loginData.rememberMe)\r\n        .then((res) => {\r\n            dispatch(isLoggedInChange(true))\r\n            dispatch(setIsLoading(false))\r\n            // dispatch(getMe())\r\n            dispatch(setAuthUserData(res.data._id, res.data.email, true))\r\n            dispatch(setUserDataAC(res.data.name, res.data.avatar))\r\n            dispatch(setError(''))\r\n        })\r\n        .catch(() => {\r\n            dispatch(isLoggedInChange(false))\r\n            dispatch(setIsLoading(false))\r\n        })\r\n}\r\nexport const logoutSuccess = () => (dispatch: Dispatch<ActionsType, null>) => {\r\n    dispatch(setAuthUserData('', '', false))\r\n    dispatch(setUserDataAC('', ''))\r\n    authAPI.logout()\r\n        .then(() => {\r\n        })\r\n        .catch((error) => {\r\n            dispatch(setError(error.response.data.error))\r\n        })\r\n}\r\nexport const getMe = () => async (dispatch: any) => {\r\n    try {\r\n        const res = await authAPI.me()\r\n        let {_id, email} = res.data\r\n        dispatch(setAuthUserData(_id, email, true))\r\n        dispatch(setUserDataAC(res.data.name, res.data.avatar))\r\n    } catch(e) {\r\n        console.log(e)\r\n    } finally {\r\n        dispatch(setIsInitialized(true))\r\n    }\r\n\r\n\r\n}\r\n// types\r\ntype ActionsType = ReturnType<typeof isLoggedInChange>\r\n    | ReturnType<typeof setError>\r\n    | ReturnType<typeof setIsLoading>\r\n    | ReturnType<typeof setAuthUserData>\r\n    | SetUserDataActionType\r\n    | ReturnType<typeof setIsInitialized>\r\n\r\ntype LoginDataType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {PATH} from '../../../1-main/1-ui/routes/Routes';\r\nimport style from './Login.module.css'\r\nimport {loginSuccess} from '../../../1-main/2-bll/authReducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../../1-main/2-bll/store';\r\nimport SuperCheckbox from '../2-signUp/sign-up-common/SuperCheckbox/SuperCheckbox';\r\nimport SuperButton from '../2-signUp/sign-up-common/SuperButton/SuperButton';\r\nimport SuperInputText from '../2-signUp/sign-up-common/SuperInputText/SuperInputText';\r\n\r\n\r\nfunction Login() {\r\n    const dispatch = useDispatch()\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const error = useSelector<AppRootStateType, string>(state => state.auth.error)\r\n    const isLoading = useSelector<AppRootStateType, boolean>(state => state.auth.isLoading)\r\n\r\n    const [email, setEmail] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    const [rememberMe, setRememberMe] = useState(false)\r\n\r\n    const emailHandler = (e: ChangeEvent<HTMLInputElement>) => setEmail(e.currentTarget.value)\r\n    const passwordHandler = (e: ChangeEvent<HTMLInputElement>) => setPassword(e.currentTarget.value)\r\n    const rememberMeHandler = () => setRememberMe(!rememberMe)\r\n    const loginHandler = () => {\r\n        dispatch(loginSuccess({email, password, rememberMe}))\r\n    }\r\n    if(isAuth){\r\n        return <Redirect to={'/profile'} />\r\n    }\r\n    return (\r\n        <div className={style.loginBlock}>\r\n            <div className={style.loginList}>\r\n                <h1 className={style.loginTitle}>Login</h1>\r\n                {isLoading ? <div style={{color: 'green'}}>Loading...</div> : ''}\r\n                <SuperInputText className={style.loginInput} placeholder={'Email'} value={email} onChange={emailHandler}/>\r\n                <SuperInputText className={style.loginInput} placeholder={'Password'} value={password} onChange={passwordHandler}/>\r\n                <div className={style.rememberBlock}>\r\n                    <SuperCheckbox checked={rememberMe} onClick={rememberMeHandler}>Remember me</SuperCheckbox>\r\n                    <NavLink to={PATH.RESET_PASSWORD} className={style.forgotLink} activeClassName={style.forgotLincActive}>Forgot password</NavLink>\r\n                </div>\r\n                <div className={style.btnBlock}>\r\n                    <SuperButton color={'blue'} onClick={loginHandler}>Login</SuperButton>\r\n                    <div className={style.loginText}>Don't have an account?</div>\r\n                    <NavLink to={PATH.SIGN_UP} className={style.signUpLink} activeClassName={style.signUpLinkActive}>Sign Up</NavLink>\r\n\r\n                </div>\r\n                {error ? <div style={{color: 'red'}}>{error}</div> : ''}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Login;\r\n","import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n})\r\n\r\n// api\r\nexport const signUpApi = {\r\n    createNewAccount(email: string, password: string) {\r\n        return instance.post('auth/register', {email, password});\r\n    }\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {signUpApi} from \"../3-dal/sign-up-api\";\r\n\r\ntype initialStateType = {\r\n    isLoggedIn: boolean\r\n    error: null | string\r\n}\r\n\r\nconst initialState = {\r\n    isLoggedIn: false,\r\n    error: '',\r\n}\r\n\r\nexport const signUpReducer = (state: initialStateType = initialState, action: ActionsType):initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-IS_LOGGED_IN\":\r\n            return {...state, isLoggedIn: action.value}\r\n        case \"SET-ERROR\":\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setIsLoggedInAC = (value: boolean) => {\r\n    return {type: 'SET-IS_LOGGED_IN', value} as const\r\n}\r\nexport const setSignUpErrorAC = (error: string) => {\r\n    return {type: 'SET-ERROR', error} as const\r\n}\r\n\r\n\r\nexport const signUpTC = (email: string, password: string) => (dispatch: Dispatch<ActionsType, ActionsType>) => {\r\n    signUpApi.createNewAccount(email, password)\r\n        .then(res => {\r\n            dispatch(setIsLoggedInAC(true))\r\n        })\r\n        .catch(rej=>{\r\n            dispatch(setSignUpErrorAC(rej.response.data.error))\r\n        })\r\n}\r\n\r\nexport type SetIsLoggedInActionType = ReturnType<typeof setIsLoggedInAC>\r\nexport type SetSignUpErrorACActionType = ReturnType<typeof setSignUpErrorAC>\r\n\r\ntype ActionsType = SetIsLoggedInActionType | SetSignUpErrorACActionType","import React, {useState} from 'react';\r\nimport SuperButton from \"./sign-up-common/SuperButton/SuperButton\";\r\nimport SuperInputText from \"./sign-up-common/SuperInputText/SuperInputText\";\r\nimport style from './SignUp.module.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {setSignUpErrorAC, signUpTC} from \"../../../1-main/2-bll/signUpReducer\";\r\nimport {AppRootStateType} from \"../../../1-main/2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../1-main/1-ui/routes/Routes\";\r\n\r\nfunction SignUp() {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType>((state) => state.signUp.isLoggedIn)\r\n    const signUpError = useSelector<AppRootStateType, string | null>(state => state.signUp.error)\r\n    const [email, setEmail] = useState<string>('')\r\n    const [password, setPassword] = useState<string>('')\r\n    const [confirmPassword, setConfirmPassword] = useState<string>('')\r\n\r\n    const onSignUp = () => {\r\n        password === confirmPassword\r\n            ? dispatch(signUpTC(email, password))\r\n            : dispatch(setSignUpErrorAC('Password mismatch'))\r\n    }\r\n\r\n    const handleSubmit = () => {\r\n        onSignUp()\r\n    }\r\n    const onCancel = () => {\r\n        setEmail('')\r\n        setPassword('')\r\n        setConfirmPassword('')\r\n        dispatch(setSignUpErrorAC(''))\r\n    }\r\n\r\n    return (\r\n        <div className={style.signUpContainer} onSubmit={handleSubmit}>\r\n            {isLoggedIn && <Redirect to={PATH.LOGIN}/>}\r\n            <form className={style.signUpForm}>\r\n                <div>\r\n                    <h3>Create a new account</h3>\r\n                    {signUpError && <span className={style.error}>{signUpError}</span>}\r\n                </div>\r\n                <div>\r\n                    <SuperInputText\r\n                        value={email}\r\n                        onChangeText={setEmail}\r\n                        onEnter={onSignUp}\r\n                        type={'text'}\r\n                        placeholder={'Email'}\r\n                    />\r\n                    <SuperInputText\r\n                        value={password}\r\n                        onChangeText={setPassword}\r\n                        onEnter={onSignUp}\r\n                        type={'Password'}\r\n                        placeholder={'Password'}\r\n                    />\r\n                    <SuperInputText\r\n                        value={confirmPassword}\r\n                        onChangeText={setConfirmPassword}\r\n                        onEnter={onSignUp}\r\n                        type={'Password'}\r\n                        placeholder={'Confirm Password'}\r\n                    />\r\n                </div>\r\n                <div className={style.buttonsContainer}>\r\n                    <SuperButton type={'button'} onClick={onCancel} color={'white'}>Cancel</SuperButton>\r\n                    <SuperButton type={'submit'} color={'blue'}>Register</SuperButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SignUp;\r\n","import classes from \"../Profile.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {updateUserDataTC} from \"../../../1-main/2-bll/profileReducer\";\r\n\r\ntype ProfileCardPropsType = {\r\n    name: string\r\n    avatar: string\r\n}\r\n\r\nexport function ProfileCard(props: ProfileCardPropsType) {\r\n    const [editModeAvatar, setEditModeAvatar] = useState(false)\r\n    const [editModeName, setEditModeName] = useState(false)\r\n    let [avatar, setAvatar] = useState(props.avatar)\r\n    let [name, setName] = useState(props.name)\r\n    const dispatch = useDispatch()\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            {\r\n                editModeAvatar\r\n                    ? <input type=\"text\"\r\n                             onBlur={() => {\r\n                                 setEditModeAvatar(false)\r\n                                 if (name && avatar) {\r\n                                     dispatch(updateUserDataTC(name, avatar))\r\n                                 }\r\n                             }}\r\n                             value={avatar}\r\n                             onChange={(e) => setAvatar(e.currentTarget.value)}\r\n                             autoFocus={true}/>\r\n                    : <div className={classes.image}\r\n                           onDoubleClick={() => setEditModeAvatar(true)}>&#9998;<img src={avatar} alt=\"User\"/></div>\r\n            }\r\n            {\r\n                editModeName\r\n                    ? <input type=\"text\"\r\n                             onBlur={() => {\r\n                                 setEditModeName(false)\r\n                                 if (name && avatar) {\r\n                                     dispatch(updateUserDataTC(name, avatar))\r\n                                 }\r\n                             }}\r\n                             value={name}\r\n                             onChange={(e) => setName(e.currentTarget.value)}\r\n                             autoFocus={true}/>\r\n                    : <div className={classes.name} onDoubleClick={() => setEditModeName(true)}>&#9998;{name}</div>\r\n            }\r\n            <div className={classes.description}>{'Front-end developer'}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import classes from \"./Profile.module.css\";\r\nimport React from \"react\";\r\nimport {EntityListType} from \"./Profile\";\r\n\r\ntype ListHeaderPropsType = {\r\n    headers: EntityListType\r\n}\r\n\r\nexport function THead(props: ListHeaderPropsType) {\r\n    return (\r\n        <tr className={classes.listItem}>\r\n            {props.headers.map(h => h === 'Last Updated'\r\n                ? <th>{h}</th>\r\n                : <th>{h}</th>)}\r\n        </tr>\r\n    )\r\n}","import axios from 'axios';\r\nimport {CardPacksType} from \"../2-bll/packsReducer\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const packsAPI = {\r\n    getPacks(queryString: string) {\r\n        return instance.get<GetPacksResponseType>(`cards/pack?${queryString}`)\r\n    },\r\n    addPack(name: string) {\r\n        return instance.post<GetPacksResponseType>('cards/pack', {cardsPack: {name: name}})\r\n    },\r\n    deletePack(packId: string) {\r\n        return instance.delete<GetPacksResponseType>(`cards/pack?id=${packId}`)\r\n    },\r\n    updatePack(packId: string, name: string) {\r\n        return instance.put<GetPacksResponseType>(`cards/pack`, {\r\n            cardsPack: {\r\n                _id: packId,\r\n                name: name\r\n            }\r\n        })\r\n    },\r\n}\r\n\r\n// types\r\nexport type GetPacksResponseType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n}","import {Dispatch} from 'redux';\r\nimport {GetPacksResponseType, packsAPI} from \"../3-dal/packsAPI\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\n\r\nconst initialState: initialStateType = {\r\n    cardPacks: [],\r\n    cardPacksTotalCount: null,\r\n    maxCardsCount: null,\r\n    minCardsCount: null,\r\n    page: null,\r\n    pageCount: null,\r\n    pages: 0,\r\n    queryParams: {\r\n        user_id: null,\r\n        packName: null,\r\n        min: null,\r\n        max: null,\r\n        sortPacks: null,\r\n        page: null,\r\n        pageCount: null\r\n    }\r\n}\r\n\r\nexport const packsReducer = (state: initialStateType = initialState, action: ActionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case \"SET-PACKS\": {\r\n            return {\r\n                ...state,\r\n                cardPacks: [...action.data.cardPacks],\r\n                cardPacksTotalCount: action.data.cardPacksTotalCount,\r\n                maxCardsCount: action.data.maxCardsCount,\r\n                minCardsCount: action.data.minCardsCount,\r\n                page: action.data.page,\r\n                pageCount: action.data.pageCount,\r\n            }\r\n        }\r\n        case \"SET-PAGES\": {\r\n            return {\r\n                ...state,\r\n                pages: action.pages\r\n            }\r\n        }\r\n        case \"SET-PACKS-USER-ID\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    user_id: action.id\r\n                }\r\n            }\r\n        }\r\n        case \"SET-PACKS-NAME-SEARCH\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    packName: action.packName\r\n                }\r\n            }\r\n        }\r\n        case \"SET-PACKS-SORT\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    sortPacks: action.sortOption\r\n                }\r\n            }\r\n        }\r\n        case \"SET-CURRENT-PAGE\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    page: action.page\r\n                }\r\n            }\r\n        }\r\n        case \"SET-PAGE-COUNT\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    pageCount: action.pageCount\r\n                }\r\n            }\r\n        }\r\n        case \"SET-MIN-MAX-CARDS-IN-PACK\": {\r\n            return {\r\n                ...state,\r\n                queryParams: {\r\n                    ...state.queryParams,\r\n                    min: action.min,\r\n                    max: action.max\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setPacksAC = (data: GetPacksResponseType) => ({type: 'SET-PACKS', data} as const)\r\nexport const setPacksPages = (pages: number) => ({type: 'SET-PAGES', pages} as const)\r\nexport const setPacksUserId = (id: string | null) => ({type: 'SET-PACKS-USER-ID', id} as const)\r\nexport const setPacksNameSearch = (packName: string | null) => ({type: 'SET-PACKS-NAME-SEARCH', packName} as const)\r\nexport const setSortPacksByDate = (sortOption: string | null) => ({type: 'SET-PACKS-SORT', sortOption} as const)\r\nexport const setPacksPageCount = (pageCount: string) => {\r\n    return {type: 'SET-PAGE-COUNT', pageCount} as const\r\n}\r\nexport const setPacksCurrentPage = (page: string) => {\r\n    return {type: 'SET-CURRENT-PAGE', page} as const\r\n}\r\nexport const setMinMaxCardsInPack = (min: string, max: string) => {\r\n    return {type: 'SET-MIN-MAX-CARDS-IN-PACK', min, max} as const\r\n}\r\n\r\n\r\n// thunks\r\nexport const getPacksTC = () => (dispatch: Dispatch<ActionsType, any>, getState: () => AppRootStateType) => {\r\n    //getting obj with optional query params from state which is empty by default\r\n    const optionalsObj = getState().packs.queryParams\r\n\r\n    //creating optional querystring with optional params\r\n    let optionalString = ''\r\n    for (const property in optionalsObj) {\r\n        if (optionalsObj[property] !== null)\r\n            optionalString = optionalString.concat(`&${property}=${optionalsObj[property]}`)\r\n    }\r\n    const finalQueryString = optionalString.slice(1)\r\n    packsAPI.getPacks(finalQueryString)\r\n        .then((res) => {\r\n            dispatch(setPacksAC(res.data))\r\n            dispatch(setPacksPages(res.data.cardPacksTotalCount % res.data.pageCount !== 0 || res.data.cardPacksTotalCount === 0\r\n                ? Math.floor(res.data.cardPacksTotalCount / res.data.pageCount + 1)\r\n                : res.data.cardPacksTotalCount / res.data.pageCount))\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\nexport const addPackTC = (name: string) => (dispatch: Dispatch<ActionsType, any>) => {\r\n    packsAPI.addPack(name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\nexport const deletePackTC = (packId: string) => (dispatch: Dispatch<ActionsType, any>) => {\r\n    packsAPI.deletePack(packId)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\nexport const updatePackTC = (packId: string, name: string) => (dispatch: Dispatch<ActionsType, any>) => {\r\n    packsAPI.updatePack(packId, name)\r\n        .then(() => {\r\n            dispatch(getPacksTC())\r\n        })\r\n        .catch((error) => {\r\n            console.log(error)\r\n        })\r\n}\r\n\r\n// types\r\nexport type CardPacksType = {\r\n    cardsCount: number\r\n    created: string\r\n    more_id: string\r\n    name: string\r\n    private: boolean\r\n    updated: string\r\n    user_id: string\r\n    user_name: string\r\n    _id: string\r\n}\r\ntype initialStateType = {\r\n    cardPacks: Array<CardPacksType>\r\n    cardPacksTotalCount: number | null\r\n    maxCardsCount: number | null\r\n    minCardsCount: number | null\r\n    page: number | null\r\n    pageCount: number | null\r\n    pages: number\r\n    queryParams: {\r\n        [key: string]: string | null\r\n    }\r\n}\r\n\r\ntype ActionsType = SetPacksActionType\r\n    | SetPacksUserIdType\r\n    | SetPacksNameSearchType\r\n    | SetSortPacksByDateType\r\n    | SetPacksPagesType\r\n    | SetPacksPageCountType\r\n    | SetPacksCurrentPageType\r\n    | SetMinMaxCardsInPackType\r\n\r\ntype SetPacksActionType = ReturnType<typeof setPacksAC>\r\ntype SetPacksUserIdType = ReturnType<typeof setPacksUserId>\r\ntype SetPacksNameSearchType = ReturnType<typeof setPacksNameSearch>\r\ntype SetSortPacksByDateType = ReturnType<typeof setSortPacksByDate>\r\ntype SetPacksPagesType = ReturnType<typeof setPacksPages>\r\ntype SetPacksPageCountType = ReturnType<typeof setPacksPageCount>\r\ntype SetPacksCurrentPageType = ReturnType<typeof setPacksCurrentPage>\r\ntype SetMinMaxCardsInPackType = ReturnType<typeof setMinMaxCardsInPack>\r\n\r\n\r\n","import React, {Dispatch, ReactChild, SetStateAction} from 'react';\r\nimport s from \"./Modal.module.css\";\r\n\r\n\r\nconst Modal = (props: ModalPropsType) => {\r\n\r\n    return (\r\n        <div className={props.active ? `${s.modal} ${s.active}` : `${s.modal}`}\r\n             onClick={() => {props.setActive(false)}}>\r\n            <div className={props.active ? `${s.modalContent} ${s.active}` : `${s.modalContent}`}\r\n                 onClick={e => e.stopPropagation()}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Modal;\r\n\r\n// types\r\n\r\ntype ModalPropsType = {\r\n    active: boolean\r\n    setActive: Dispatch<SetStateAction<boolean>>\r\n    children: ReactChild\r\n}","import React, {Dispatch, SetStateAction} from \"react\";\r\nimport s from \"../Modal.module.css\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../1-main/2-bll/store\";\r\nimport {CardPacksType} from \"../../../1-main/2-bll/packsReducer\";\r\n\r\nexport const ModalForRemove = (props: ModalForRemovePropsType) => {\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.packs.cardPacks)\r\n    const card = cardPacks.find(card => card._id === props.packId)\r\n\r\n    const deletePack = () => {\r\n        props.setModalActive(false)\r\n        props.action()\r\n    }\r\n\r\n    return (\r\n        <div className={s.childrenContainer}>\r\n            <h2>Delete pack</h2>\r\n            <p style={{fontSize: \"16px\"}}>{`Do you really want to remove ${card && card.name}?`}</p>\r\n            <p style={{fontSize: \"16px\"}}> All cards will be excluded from this course.</p>\r\n            <div className={s.btnContainer}>\r\n                <button className={s.cancelBtn} onClick={() => props.setModalActive(false)}>Cancel</button>\r\n                <button className={s.saveBtn} onClick={deletePack}>Delete</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype ModalForRemovePropsType = {\r\n    action: Function\r\n    setModalActive: Dispatch<SetStateAction<boolean>>\r\n    packId: string | null\r\n}","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport s from \"../Modal.module.css\";\r\n\r\nexport const ModalForEditing = (props: ModalForEditingPropsType) => {\r\n    const [packValue, setPackValue] = useState<string | null>(null)\r\n\r\n    const updatePackName = () => {\r\n        props.action(packValue)\r\n        props.setModalActive(false)\r\n        setPackValue(null)\r\n    }\r\n\r\n    return (\r\n        <div className={s.childrenContainer}>\r\n            <h2>Edit pack name</h2>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Name pack</legend>\r\n                <input type=\"text\"\r\n                       value={packValue === null ? props.packName : packValue}\r\n                       onChange={(e) => setPackValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <div className={s.btnContainer}>\r\n                <button className={s.cancelBtn} onClick={() => props.setModalActive(false)}>Cancel</button>\r\n                <button className={s.saveBtn} onClick={updatePackName}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype ModalForEditingPropsType = {\r\n    action: Function\r\n    setModalActive: Dispatch<SetStateAction<boolean>>\r\n    packId: string | null\r\n    packName: string | number | readonly string[] | undefined\r\n}","import classes from \"./Profile.module.css\";\r\nimport React, {useState} from \"react\";\r\nimport {CardPacksType, deletePackTC, updatePackTC} from \"../../1-main/2-bll/packsReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../1-main/2-bll/store\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport Modal from \"../5-modal/Modal\";\r\nimport {ModalForRemove} from \"../5-modal/children/ModalForRemove\";\r\nimport {ModalForEditing} from \"../5-modal/children/ModalForEditing\";\r\n\r\ntype ListItemPropsType = {\r\n    items: Array<CardPacksType>\r\n}\r\n\r\n\r\nexport function TBody(props: ListItemPropsType) {\r\n    const dispatch = useDispatch()\r\n    const loggedUserId = useSelector<AppRootStateType, string>(state => state.auth.userId)\r\n    const [deleteModalActive, setDeleteModalActive] = useState(false)\r\n    const [editModalActive, setEditModalActive] = useState(false)\r\n    const [packId, setPackId] = useState<string | null>(null)\r\n    const [packName, setPackName] = useState<string | number | readonly string[] | undefined>('')\r\n\r\n    return (\r\n        <>\r\n            {\r\n                props.items.map((item, index) => {\r\n                    const lastUpdated = item.updated.slice(0, 10)\r\n                    const userName = item.user_name.slice(0, 30)\r\n\r\n                    const deletePackRequestHandler = () => {\r\n                        packId && dispatch(deletePackTC(packId))\r\n                    }\r\n                    const deletePackModalHandler = (id?: string) => {\r\n                        id && setPackId(id)\r\n                        setDeleteModalActive(true)\r\n                    }\r\n\r\n                    const editPackRequestHandler = (name: string) => {\r\n                        packId && dispatch(updatePackTC(packId, name))\r\n                    }\r\n                    const editPackModalHandler = (id?: string, packName?: string) => {\r\n                        id && setPackId(id)\r\n                        packName && setPackName(packName)\r\n                        setEditModalActive(true)\r\n                    }\r\n\r\n                    return <tr className={classes.listItem} key={index}>\r\n                        <td><NavLink to={`/cards/${item._id}`}>{item.name}</NavLink></td>\r\n                        <td>{item.cardsCount}</td>\r\n                        <td>{lastUpdated}</td>\r\n                        <td>{userName}</td>\r\n                        <td>\r\n                            {\r\n                                loggedUserId === item.user_id &&\r\n                                <button\r\n                                    className={classes.btn}\r\n                                    onClick={() => deletePackModalHandler(item._id)}>{'Delete'}\r\n                                </button>\r\n                            }\r\n                            {\r\n                                loggedUserId === item.user_id &&\r\n                                <button\r\n                                    style={{marginLeft: \"10px\"}}\r\n                                    className={classes.btn}\r\n                                    onClick={() => editPackModalHandler(item._id, item.name)}>{'Edit'}\r\n                                </button>\r\n                            }\r\n                            <button style={{marginLeft: \"10px\"}} className={classes.btn}>{'Learn'}</button>\r\n                            <Modal active={deleteModalActive} setActive={setDeleteModalActive}>\r\n                                <ModalForRemove action={deletePackRequestHandler}\r\n                                                packId={packId}\r\n                                                setModalActive={setDeleteModalActive}/>\r\n                            </Modal>\r\n                            <Modal active={editModalActive} setActive={setEditModalActive}>\r\n                                <ModalForEditing action={editPackRequestHandler}\r\n                                                 packId={packId}\r\n                                                 packName={packName}\r\n                                                 setModalActive={setEditModalActive}/>\r\n                            </Modal>\r\n                        </td>\r\n                    </tr>\r\n                })\r\n            }\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport {THead} from \"./THead\";\r\nimport {TBody} from \"./TBody\";\r\nimport {EntityListType} from \"./Profile\";\r\nimport classes from \"./Profile.module.css\";\r\nimport {CardPacksType} from \"../../1-main/2-bll/packsReducer\";\r\n\r\ntype ListPropsType = {\r\n    headers: EntityListType\r\n    items: Array<CardPacksType>\r\n}\r\n\r\nexport function Table(props: ListPropsType) {\r\n    return (\r\n        <table className={classes.table}>\r\n            <THead headers={props.headers}/>\r\n            <TBody items={props.items}/>\r\n        </table>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function Search() {\r\n    return <input type=\"search\" placeholder=\"Search...\"/>\r\n}","import React from \"react\";\r\n\r\ntype HeaderPropsType = {\r\n    title: string\r\n}\r\n\r\nexport function Header(props: HeaderPropsType) {\r\n    return <h1>{props.title}</h1>\r\n}","import classes from \"./Profile.module.css\";\r\nimport React, {useState} from \"react\";\r\n\r\nexport function Range() {\r\n    const [value, setValue] = useState(50)\r\n    return (\r\n        <div className={classes.range}>\r\n            <div>Number of cards</div>\r\n            <div><span>{value}</span></div>\r\n            <input type=\"range\" name=\"range\" min=\"0\" max=\"100\" value={value} onChange={e => setValue(+e.currentTarget.value)}/>\r\n        </div>\r\n    )\r\n}","import classes from \"./Profile.module.css\";\r\nimport React from \"react\";\r\n\r\ntype PaginationPropsType = {\r\n    page: number | null\r\n}\r\n\r\nexport function PaginationTest(props: PaginationPropsType) {\r\n\r\n    return (\r\n        <>\r\n            {<span className={classes.pagination}>{props.page}</span>}\r\n        </>\r\n    )\r\n}","import React from 'react';\r\n\r\nfunction Preloader() {\r\n    return (\r\n        <div>\r\n            Loading...\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Preloader;\r\n","import React, {useEffect} from 'react';\r\nimport classes from './Profile.module.css';\r\nimport {ProfileCard} from \"./1-ProfileCard/ProfileCard\";\r\nimport {Table} from \"./Table\";\r\nimport {Search} from \"./Search\";\r\nimport {Header} from \"./Header\";\r\nimport {Range} from \"./Range\";\r\nimport {PaginationTest} from \"./Pagination\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../1-main/2-bll/store\";\r\nimport {CardPacksType, getPacksTC} from \"../../1-main/2-bll/packsReducer\";\r\nimport Preloader from \"../../1-main/1-ui/common/Preloader\";\r\n\r\n\r\nfunction Profile() {\r\n    const name = useSelector<AppRootStateType, string>(state => state.profile.name)\r\n    const avatar = useSelector<AppRootStateType, string>(state => state.profile.avatar)\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.packs.cardPacks)\r\n    const page = useSelector<AppRootStateType, number | null>(state => state.packs.page)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n    }, [dispatch])\r\n\r\n    if (!(name || avatar)) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.page}>\r\n            <aside className={classes.sidebar}>\r\n                <ProfileCard name={name} avatar={avatar}/>\r\n                <Range/>\r\n            </aside>\r\n            <div className={classes.content}>\r\n                <header className={classes.header}>\r\n                    <Header title={`Packs list ${name}`}/>\r\n                    <Search/>\r\n                </header>\r\n                <main className={classes.main}>\r\n                    <Table headers={['Name', 'Cards', 'Last Updated', 'Created by', 'Actions']} items={cardPacks}/>\r\n                </main>\r\n                <footer className={classes.footer}>\r\n                    <PaginationTest page={page}/>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n// Types\r\nexport type EntityListType = Array<string>\r\nexport type ItemsListType = {\r\n    [key: string]: string\r\n}\r\n\r\n\r\nexport default Profile;\r\n","import axios from \"axios\";\r\n\r\nexport type ForgotRequestType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type ForgotResponseType = {\r\n    info: string\r\n    success: boolean\r\n    answer: boolean\r\n    html: boolean\r\n}\r\n\r\nexport type SetNewPasswordRequestType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const restoreAPI = {\r\n    forgotPassword(requestData: ForgotRequestType) {\r\n        return instance.post<ForgotResponseType>(`auth/forgot`, requestData)\r\n    },\r\n    setNewPassword(requestData: SetNewPasswordRequestType) {\r\n        return instance.post(`auth/set-new-password`, requestData)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {ForgotRequestType, restoreAPI, SetNewPasswordRequestType} from \"../3-dal/restoreAPI\";\r\n\r\ntype InitStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    email: null as string | null,\r\n    restoreEmailSendSuccess: false,\r\n    newPasswordSuccess: false\r\n}\r\n\r\nexport const restoreReducer = (state: InitStateType = initialState, action: UnionRestoreAT) => {\r\n    switch (action.type) {\r\n        case \"restore/SET-RECEIVER-EMAIL\": {\r\n            return {...state, email: action.email}\r\n        }\r\n        case \"restore/EMAIL-SEND-SUCCESS\": {\r\n            return {...state, restoreEmailSendSuccess: action.success}\r\n        }\r\n        case \"restore/CHANGE-PASSWORD-SUCCESS\":\r\n            return {...state, newPasswordSuccess: action.success}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst recoveryMessage = `<div style=\"padding: 15px\">Password recovery link: <a href=\"https://ffiillaattoovv.github.io/flashcards#/newPassword/$token$\">click here</a></div>`\r\nconst recoveryMessageAddressFrom = `NEKO ADMIN <ai73a@yandex.by>`\r\n//actions\r\nexport const setReceiverEmailAC = (email: string) => {\r\n    return {type: 'restore/SET-RECEIVER-EMAIL', email} as const\r\n}\r\nexport const emailSendSuccessAC = (success: boolean) => {\r\n    return {type: 'restore/EMAIL-SEND-SUCCESS', success} as const\r\n}\r\nexport const changePasswordSuccessAC = (success: boolean) => {\r\n    return {type: 'restore/CHANGE-PASSWORD-SUCCESS', success} as const\r\n}\r\n//thunks\r\nexport const forgotPasswordTC = (email: string) => async (dispatch: Dispatch<UnionRestoreAT, null>) => {\r\n    try {\r\n        let requestObj: ForgotRequestType = {\r\n            email: email,\r\n            from: recoveryMessageAddressFrom,\r\n            message: recoveryMessage\r\n        }\r\n        const response = await restoreAPI.forgotPassword(requestObj)\r\n        dispatch(setReceiverEmailAC(email))\r\n        dispatch(emailSendSuccessAC(response.data.success))\r\n        dispatch(changePasswordSuccessAC(false))\r\n    } catch(e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const setNewPasswordTC = (password: string, token: string) => async (dispatch: Dispatch<UnionRestoreAT, null>) => {\r\n    try {\r\n        let requestObj: SetNewPasswordRequestType = {\r\n            password: password,\r\n            resetPasswordToken: token\r\n        }\r\n        await restoreAPI.setNewPassword(requestObj)\r\n        dispatch(changePasswordSuccessAC(true))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\n//action types\r\nexport type UnionRestoreAT = SetReceiverEmailAT | EmailSendSuccessACAT | ChangePasswordSuccessAT\r\ntype SetReceiverEmailAT = ReturnType<typeof setReceiverEmailAC>\r\ntype EmailSendSuccessACAT = ReturnType<typeof emailSendSuccessAC>\r\ntype ChangePasswordSuccessAT = ReturnType<typeof changePasswordSuccessAC>","import React, {ChangeEvent, useState, MouseEvent} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {forgotPasswordTC} from \"../../../1-main/2-bll/restoreReducer\";\r\nimport {AppRootStateType} from \"../../../1-main/2-bll/store\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../../../1-main/1-ui/routes/Routes\";\r\nimport style from '../Restore.module.css';\r\nimport SuperInputText from \"../../1-auth/2-signUp/sign-up-common/SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../1-auth/2-signUp/sign-up-common/SuperButton/SuperButton\";\r\n\r\nfunction ResetPassword() {\r\n\r\n    const dispatch = useDispatch()\r\n    const restoreEmailSendSuccess = useSelector<AppRootStateType, boolean>(state => state.restore.restoreEmailSendSuccess)\r\n\r\n    const [emailAddress, setEmailAddress] = useState('')\r\n\r\n    const onChangeEmail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmailAddress(e.currentTarget.value)\r\n    }\r\n\r\n    const submitEmail = (e: MouseEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        dispatch(forgotPasswordTC(emailAddress))\r\n    }\r\n\r\n    if (restoreEmailSendSuccess) {\r\n        return <Redirect to={PATH.CHECK_EMAIL}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.restoreContainer}>\r\n            <form className={style.restoreForm} onSubmit={submitEmail}>\r\n                <div className= {style.headers}>\r\n                    <h3>Forgot your password</h3>\r\n                    <h3>or want to change it?</h3>\r\n                    <h4>Type your email and we will send you instructions</h4>\r\n                </div>\r\n                <div>\r\n                    <SuperInputText\r\n                        value={emailAddress}\r\n                        onChange={onChangeEmail}\r\n                        type={'text'}\r\n                        placeholder={'Email'}\r\n                    />\r\n                </div>\r\n                <div className={style.buttonsContainer}>\r\n                    <SuperButton type={'submit'} color={'blue'}>Send instructions</SuperButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResetPassword;\r\n","import React, {ChangeEvent, useState, MouseEvent} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../1-main/2-bll/store\";\r\nimport {setNewPasswordTC} from \"../../../1-main/2-bll/restoreReducer\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {PATH} from \"../../../1-main/1-ui/routes/Routes\";\r\nimport style from \"../Restore.module.css\";\r\nimport SuperInputText from \"../../1-auth/2-signUp/sign-up-common/SuperInputText/SuperInputText\";\r\nimport SuperButton from \"../../1-auth/2-signUp/sign-up-common/SuperButton/SuperButton\";\r\n\r\nfunction NewPassword() {\r\n\r\n    const dispatch = useDispatch()\r\n    const {token} = useParams<{ token: string }>()\r\n    const changePasswordSuccess = useSelector<AppRootStateType, boolean>(state => state.restore.newPasswordSuccess)\r\n\r\n    const [newPassword, setNewPassword] = useState('')\r\n\r\n    const onChangeNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n\r\n    const submitNewPassword = (e: MouseEvent<HTMLFormElement>) => {\r\n        e.preventDefault()\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }\r\n\r\n    if (changePasswordSuccess) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    return (\r\n        <div className={style.restoreContainer}>\r\n            <form className={style.restoreForm} onSubmit={submitNewPassword}>\r\n                <div>\r\n                    <h3>Create new password</h3>\r\n                </div>\r\n                <div>\r\n                    <SuperInputText\r\n                        value={newPassword}\r\n                        onChange={onChangeNewPassword}\r\n                        type={'password'}\r\n                        placeholder={'New password'}\r\n                    />\r\n                </div>\r\n                <p>Create new password and log in with it afterwards</p>\r\n                <div className={style.buttonsContainer}>\r\n                    <SuperButton type={'submit'} color={'blue'}>Create new password</SuperButton>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NewPassword;\r\n","import React from 'react';\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../1-main/2-bll/store\";\r\nimport style from '../Restore.module.css';\r\n\r\nfunction CheckEmail() {\r\n\r\n    const emailOfReceiver = useSelector<AppRootStateType, string | null>(state => state.restore.email)\r\n\r\n    return (\r\n        <div className={style.restoreContainer}>\r\n            <div className={style.restoreForm}>\r\n                <h3>Check Email</h3>\r\n                <img src=\"\" alt=\"letter img\"/>\r\n                <p>We've sent an Email with instructions to {emailOfReceiver}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CheckEmail;\r\n","import React, {ChangeEvent, InputHTMLAttributes, DetailedHTMLProps} from 'react'\r\n\r\ntype DefaultRadioPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype SuperRadioPropsType = DefaultRadioPropsType & {\r\n    options?: any[]\r\n    onChangeOption?: (option: any) => void\r\n}\r\n\r\nconst SuperRadio: React.FC<SuperRadioPropsType> = (\r\n    {\r\n        type, name,\r\n        options, value,\r\n        onChange, onChangeOption,\r\n        ...restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        // onChange, onChangeOption\r\n        onChange && onChange(e)\r\n        onChangeOption && onChangeOption(e.currentTarget.value)\r\n    }\r\n\r\n    // map options with key\r\n    const mappedOptions: any[] = options ? options.map((o, i) => (\r\n        <label key={name + '-' + i}>\r\n            <input\r\n                type={'radio'}\r\n                name={name}\r\n                checked={o === value}\r\n                value={o}\r\n                onChange={onChangeCallback}\r\n                // name, checked, value, onChange\r\n            />\r\n            {`${o} `}\r\n        </label>\r\n    )) : []\r\n\r\n    return (\r\n        <>\r\n            {mappedOptions}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SuperRadio","import React, {ChangeEvent} from 'react';\r\nimport styles from \"./SearchBar.module.css\";\r\nimport RadioOptions from \"./RadioOptions\";\r\n\r\ntype SearchBarProps = {\r\n    searchValue: string\r\n    onChangeSearchValue: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onClickSearch: () => void\r\n    onClickReset: () => void\r\n    searchOptions?: string[]\r\n    searchOption?: string\r\n    setSearchOption?: (option: string) => void\r\n}\r\n\r\nexport const SearchBar = ({searchValue, onChangeSearchValue, onClickSearch, onClickReset, searchOption, setSearchOption, searchOptions}: SearchBarProps) => {\r\n    return (\r\n        <div className={styles.searchInput}>\r\n            {searchOptions && <RadioOptions name={'radio'} options={searchOptions} value={searchOption}\r\n                          onChangeOption={setSearchOption}/>}\r\n            <input className={styles.letterInput} value={searchValue} onChange={onChangeSearchValue}/>\r\n            <button onClick={onClickSearch}>Search</button>\r\n            <button onClick={onClickReset}>Reset</button>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport styles from \"./Pagination.module.css\";\r\nimport {paginate} from \"../utils/paginationAlgorithm\";\r\n\r\ntype PaginationPropsType = {\r\n    pageCountArray: string[]\r\n    setPageCountCallback: (pageCount: string) => () => void\r\n    pages: number\r\n    setPage: (page: number) => () => void\r\n    totalItems?: number\r\n    currentPage?: number\r\n    pageSize?: number\r\n}\r\n\r\nexport const Pagination = ({pageCountArray, setPageCountCallback, pages, setPage, totalItems, currentPage, pageSize}: PaginationPropsType) => {\r\n    //pageCount\r\n    const pageCountButtons = pageCountArray.map(pc => <button key={Math.random() + pc} onClick={setPageCountCallback(pc)}>{pc}</button>)\r\n\r\n    //pages\r\n    let pagesTotalCount = []\r\n    if (pages < 7) {\r\n        for (let i = 1; i <= pages; i++) {\r\n            pagesTotalCount.push(i)\r\n        }\r\n    } else {\r\n        let {pages, totalPages} = paginate(totalItems!, currentPage, pageSize, 7)\r\n        pagesTotalCount = [...pages]\r\n        if (pagesTotalCount[0] !== 1) {\r\n            pagesTotalCount[0] = 1\r\n        }\r\n        if (pagesTotalCount[pagesTotalCount.length - 1] !== totalPages) {\r\n            pagesTotalCount[pagesTotalCount.length - 1] = totalPages\r\n        }\r\n    }\r\n\r\n    const pagesElements = pagesTotalCount.map(p => <button key={Math.random() + p} onClick={setPage(p)}>{p}</button>)\r\n\r\n    return (\r\n        <div className={styles.pagesFooter}>\r\n            <div>\r\n                Items on page:{pageCountButtons}\r\n            </div>\r\n            <div>\r\n                <h4>Current page {currentPage}</h4>\r\n            </div>\r\n            <div>\r\n                Pages:{pagesElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}","export function paginate(\r\n    totalItems: number,\r\n    currentPage: number = 1,\r\n    pageSize: number = 10,\r\n    maxPages: number = 10\r\n) {\r\n    // calculate total pages\r\n    let totalPages = Math.ceil(totalItems / pageSize);\r\n\r\n    // ensure current page isn't out of range\r\n    if (currentPage < 1) {\r\n        currentPage = 1;\r\n    } else if (currentPage > totalPages) {\r\n        currentPage = totalPages;\r\n    }\r\n\r\n    let startPage: number, endPage: number;\r\n    if (totalPages <= maxPages) {\r\n        // total pages less than max so show all pages\r\n        startPage = 1;\r\n        endPage = totalPages;\r\n    } else {\r\n        // total pages more than max so calculate start and end pages\r\n        let maxPagesBeforeCurrentPage = Math.floor(maxPages / 2);\r\n        let maxPagesAfterCurrentPage = Math.ceil(maxPages / 2) - 1;\r\n        if (currentPage <= maxPagesBeforeCurrentPage) {\r\n            // current page near the start\r\n            startPage = 1;\r\n            endPage = maxPages;\r\n        } else if (currentPage + maxPagesAfterCurrentPage >= totalPages) {\r\n            // current page near the end\r\n            startPage = totalPages - maxPages + 1;\r\n            endPage = totalPages;\r\n        } else {\r\n            // current page somewhere in the middle\r\n            startPage = currentPage - maxPagesBeforeCurrentPage;\r\n            endPage = currentPage + maxPagesAfterCurrentPage;\r\n        }\r\n    }\r\n\r\n    // calculate start and end item indexes\r\n    let startIndex = (currentPage - 1) * pageSize;\r\n    let endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\r\n\r\n    // create an array of pages to ng-repeat in the pager control\r\n    let pages = Array.from(Array((endPage + 1) - startPage).keys()).map(i => startPage + i);\r\n\r\n    // return object with all pager properties required by the view\r\n    return {\r\n        totalItems: totalItems,\r\n        currentPage: currentPage,\r\n        pageSize: pageSize,\r\n        totalPages: totalPages,\r\n        startPage: startPage,\r\n        endPage: endPage,\r\n        startIndex: startIndex,\r\n        endIndex: endIndex,\r\n        pages: pages\r\n    };\r\n}","import React from 'react'\r\nimport Slider from \"antd/lib/slider\";\r\nimport 'antd/dist/antd.css';\r\n\r\ntype DoubleRangePropsType = {\r\n    onChangeRange?: (value: [number, number]) => void\r\n    value?: [number, number]\r\n    min?: number\r\n    max?: number\r\n    step?: number\r\n    // min, max, step, disable, ...\r\n}\r\n\r\nexport const DoubleRange: React.FC<DoubleRangePropsType> = (\r\n    {\r\n        onChangeRange, value, min, max, step\r\n        // min, max, step, disable, ...\r\n    }\r\n) => {\r\n    // console.log('DoubleRange', min, value && value[0], max, value && value[1])\r\n    const onChangeCallback = (value: [number, number]) => {\r\n        onChangeRange && onChangeRange(value)\r\n    }\r\n\r\n    // сделать самому, можно подключать библиотеки\r\n    return (\r\n        <Slider style={{width: \"500px\"}} range={true}  value={value} onChange={onChangeCallback} min={min} max={max} step={step}/>\r\n    )\r\n};\r\n","import React from \"react\";\r\nimport styles from \"../../../2-features/3-cards/Cards.module.css\";\r\nimport {DoubleRange} from \"./DoubleRange\";\r\n\r\ntype RangeFilterPropsType = {\r\n    minValue: number\r\n    maxValue: number\r\n    onChangeRangeDouble: ([num1, num2]: number[]) => void\r\n    onClickGradeRangeFilter: () => void\r\n    min?: number\r\n    max?: number\r\n    step?: number\r\n}\r\n\r\nexport const RangeFilter = (props: RangeFilterPropsType) => {\r\n    // console.log('Rangefilter', props.min, props.max)\r\n    return  (\r\n        <div className={styles.rangeContainer}>\r\n            <span>{props.minValue}</span>\r\n            <DoubleRange value={[props.minValue, props.maxValue]} onChangeRange={props.onChangeRangeDouble} min={props.min} max={props.max} step={props.step}/>\r\n            <span>{props.maxValue}</span>\r\n            <button onClick={props.onClickGradeRangeFilter}>Filter</button>\r\n        </div>\r\n    )\r\n}","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport s from \"../Modal.module.css\";\r\n\r\nexport const ModalWithOneInput = (props: ModalWithOneInputPropsType) => {\r\n    const [packValue, setPackValue] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const sendAddPack = () => {\r\n        dispatch(props.action(packValue))\r\n        props.setModalActive(false)\r\n        setPackValue('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.childrenContainer}>\r\n            <h2>Add new pack</h2>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Name pack</legend>\r\n                <input type=\"text\" value={packValue}\r\n                       onChange={(e) => setPackValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <div className={s.btnContainer}>\r\n                <button className={s.cancelBtn} onClick={() => props.setModalActive(false)}>Cancel</button>\r\n                <button className={s.saveBtn} onClick={sendAddPack}>Save</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype ModalWithOneInputPropsType = {\r\n    action: Function\r\n    setModalActive: Dispatch<SetStateAction<boolean>>\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport classes from \"../2-profile/Profile.module.css\";\r\nimport {Header} from \"../2-profile/Header\";\r\nimport {Table} from \"../2-profile/Table\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../1-main/2-bll/store\";\r\nimport {\r\n    addPackTC,\r\n    CardPacksType,\r\n    getPacksTC, setMinMaxCardsInPack, setPacksCurrentPage,\r\n    setPacksNameSearch, setPacksPageCount,\r\n    setPacksUserId, setSortPacksByDate\r\n} from \"../../1-main/2-bll/packsReducer\";\r\nimport {SearchBar} from \"../../1-main/1-ui/common/SearchBar\";\r\nimport {Pagination} from \"../../1-main/1-ui/common/Pagination\";\r\nimport {RangeFilter} from \"../../1-main/1-ui/common/RangeFilter\";\r\nimport Modal from \"../5-modal/Modal\";\r\nimport {ModalWithOneInput} from \"../5-modal/children/ModalWithOneInput\";\r\n\r\n\r\nconst Packs = () => {\r\n    const cardPacks = useSelector<AppRootStateType, Array<CardPacksType>>(state => state.packs.cardPacks)\r\n    const userId = useSelector<AppRootStateType, string>(state => state.auth.userId)\r\n    const [modalActive, setModalActive] = useState(false)\r\n    const pages = useSelector<AppRootStateType, number>(state => state.packs.pages)\r\n    const page = useSelector<AppRootStateType, number | null>(state => state.packs.page)\r\n    const pageCount = useSelector<AppRootStateType, number | null>(state => state.packs.pageCount)\r\n    const totalPacks = useSelector<AppRootStateType, number | null>(state => state.packs.cardPacksTotalCount)\r\n    const minCardsCount = useSelector<AppRootStateType, number | null>(state => state.packs.minCardsCount)\r\n    const maxCardsCount = useSelector<AppRootStateType, number | null>(state => state.packs.maxCardsCount)\r\n    const dispatch = useDispatch()\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const [minCardValue, setMinCardValue] = useState(minCardsCount)\r\n    const [maxCardValue, setMaxCardValue] = useState(maxCardsCount)\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacksTC())\r\n        setMinCardValue(minCardsCount)\r\n        setMaxCardValue(maxCardsCount)\r\n    }, [dispatch, minCardsCount, maxCardsCount])\r\n\r\n    if (minCardValue === null || maxCardValue === null) {\r\n        return <div>Loading</div>\r\n    }\r\n\r\n    //add new pack\r\n    const addNewPackHandler = () => {\r\n        setModalActive(true)\r\n    }\r\n    //end add new pack\r\n\r\n    //get packs personal or all of them\r\n    const getMyPacksHandler = () => {\r\n        dispatch(setPacksUserId(userId))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const getAllPacksHandler = () => {\r\n        dispatch(setPacksUserId(null))\r\n        dispatch(getPacksTC())\r\n    }\r\n    //end get packs personal or all of them\r\n\r\n    //search packs by name\r\n    const onChangeSearchValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.currentTarget.value)\r\n    }\r\n    const onClickSearch = () => {\r\n        dispatch(setPacksNameSearch(searchValue))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const onClickReset = () => {\r\n        setSearchValue('')\r\n        dispatch(setPacksNameSearch(null))\r\n        dispatch(getPacksTC())\r\n    }\r\n    //end search packs by name\r\n\r\n    //sort packs by updated date\r\n    const onClickEarliestPacksFirst = () => {\r\n        dispatch(setSortPacksByDate('1updated'))\r\n        dispatch(getPacksTC())\r\n    }\r\n    const onClickLatestPacksFirst = () => {\r\n        dispatch(setSortPacksByDate('0updated'))\r\n        dispatch(getPacksTC())\r\n    }\r\n    //end sort packs by updated date\r\n\r\n    //pagination\r\n    //pageCount\r\n    const setPageCountCallback = (pageCount: string) => {\r\n        return () => {\r\n            dispatch(setPacksPageCount(pageCount))\r\n            dispatch(getPacksTC())\r\n        }\r\n    }\r\n    //end page count\r\n    //pages\r\n    const setPage = (page: number) => {\r\n        return () => {\r\n            dispatch(setPacksCurrentPage(page.toString()))\r\n            dispatch(getPacksTC())\r\n        }\r\n    }\r\n    //end pages\r\n    //end pagination\r\n\r\n    //range filter by cards number\r\n    const onChangeCardsRangeDouble = ([num1, num2]: number[]) => {\r\n        setMinCardValue(num1)\r\n        setMaxCardValue(num2)\r\n    }\r\n\r\n    const onClickTotalCardsRangeFilter = () => {\r\n        if (minCardValue !== null && maxCardValue !== null) {\r\n            dispatch(setMinMaxCardsInPack(minCardValue.toString(), maxCardValue.toString()))\r\n            dispatch(getPacksTC())\r\n        }\r\n    }\r\n    //end range filter by cards number\r\n\r\n    return (\r\n        <div className={classes.page}>\r\n            <aside className={classes.sidebar}>\r\n                <div className={classes.profile}>\r\n                    <div style={{padding: \"80px\"}}>\r\n                        <button onClick={getMyPacksHandler}>My</button>\r\n                        <button onClick={getAllPacksHandler}>All</button>\r\n                    </div>\r\n                </div>\r\n                <RangeFilter minValue={minCardValue!}\r\n                             maxValue={maxCardValue!}\r\n                             onChangeRangeDouble={onChangeCardsRangeDouble}\r\n                             onClickGradeRangeFilter={onClickTotalCardsRangeFilter}\r\n                             min={minCardsCount!}\r\n                             max={maxCardsCount!}\r\n                             step={1}\r\n                />\r\n\r\n            </aside>\r\n            <div className={classes.content}>\r\n                <header className={classes.header}>\r\n                    <Header title={'Packs list'}/>\r\n                    <div className={classes.headerFeatures}>\r\n                        <SearchBar searchValue={searchValue}\r\n                                   onChangeSearchValue={onChangeSearchValue}\r\n                                   onClickSearch={onClickSearch}\r\n                                   onClickReset={onClickReset}\r\n                        />\r\n                        <button style={{marginLeft: \"50px\"}} onClick={addNewPackHandler}>Add new pack</button>\r\n                    </div>\r\n                </header>\r\n                <main className={classes.main}>\r\n                    <div className={classes.sortButtons}>\r\n                        <span>Sort by date:</span>\r\n                        <button onClick={onClickEarliestPacksFirst}>Earliest</button>\r\n                        <button onClick={onClickLatestPacksFirst}>Latest</button>\r\n                    </div>\r\n                    <Table headers={['Name', 'Cards', 'Last Updated', 'Created by', 'Actions']} items={cardPacks}/>\r\n                </main>\r\n                <footer className={classes.footer}>\r\n                    <Pagination pageCountArray={['3', '7', '15', '30']}\r\n                                setPageCountCallback={setPageCountCallback}\r\n                                pages={pages}\r\n                                setPage={setPage}\r\n                                totalItems={totalPacks!}\r\n                                currentPage={page!}\r\n                                pageSize={pageCount!}\r\n                    />\r\n                </footer>\r\n            </div>\r\n            <Modal active={modalActive} setActive={setModalActive}>\r\n                <ModalWithOneInput action={addPackTC} setModalActive={setModalActive}/>\r\n            </Modal>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Packs;","import axios from \"axios\";\r\nimport {CardType} from \"../2-bll/cardsReducer\";\r\n\r\ntype CardsResponseType = {\r\n    cards: CardType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type AddCardDataType = {\r\n    cardsPack_id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n}\r\nexport type RequestAddCardType = {\r\n    card: AddCardDataType\r\n}\r\nexport type UpdateCardDataType = {\r\n    _id: string\r\n    question?: string\r\n    answer?: string\r\n    grade?: number\r\n    shots?: number\r\n    rating?: number\r\n    answerImg?: string\r\n    questionImg?: string\r\n    questionVideo?: string\r\n    answerVideo?: string\r\n    type?: string\r\n    comments?: string\r\n}\r\nexport type RequestUpdateCardType = {\r\n    card: UpdateCardDataType\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n    getCards(cardsPack_id: string, optionals?: string) {\r\n        let queryString = `cards/card?cardsPack_id=${cardsPack_id}`\r\n        if (optionals) {\r\n            queryString = queryString.concat(optionals)\r\n        }\r\n        return instance.get<CardsResponseType>(queryString)\r\n    },\r\n    addCard(data: RequestAddCardType) {\r\n        return instance.post(`cards/card`, data)\r\n    },\r\n    deleteCard(id: string) {\r\n        return instance.delete(`cards/card/?id=${id}`)\r\n    },\r\n    updateCard(data: RequestUpdateCardType) {\r\n        return instance.put(`cards/card`, data)\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {cardsAPI, RequestAddCardType, RequestUpdateCardType} from \"../3-dal/cardsAPI\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\ntype InitStateType = typeof initState\r\nexport type CardType = {\r\n    answer: string\r\n    question: string\r\n    cardsPack_id: string\r\n    grade: number\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n    _id: string\r\n}\r\ntype QueryParamsObjType = {\r\n    [key: string]: string\r\n}\r\n\r\ntype FetchCardsType = ReturnType<typeof fetchCards>\r\ntype SetInitType = ReturnType<typeof setInit>\r\ntype SetPagesType = ReturnType<typeof setPages>\r\ntype SetSortCardsType = ReturnType<typeof setSortCards>\r\ntype SetPageCountType = ReturnType<typeof setPageCount>\r\ntype SetCurrentPageType = ReturnType<typeof setCurrentPage>\r\ntype SetMinMaxGradeType = ReturnType<typeof setMinMaxGrade>\r\ntype SetQuestionSearchType = ReturnType<typeof setQuestionSearch>\r\ntype SetAnswerSearchType = ReturnType<typeof setAnswerSearch>\r\ntype ActionsType = FetchCardsType | SetInitType | SetSortCardsType | SetPageCountType | SetPagesType | SetCurrentPageType | SetMinMaxGradeType | SetQuestionSearchType | SetAnswerSearchType\r\n\r\nconst initState = {\r\n    cards: [] as CardType[],\r\n    queryParamsObject: {\r\n        cardAnswer: '',\r\n        cardQuestion: '',\r\n        min: '',\r\n        max: '',\r\n        sortCards: '',\r\n        page: '',\r\n        pageCount: ''\r\n    } as QueryParamsObjType,\r\n    pages: 0 as number,\r\n    pageCount: 0 as number,\r\n    currentPage: 1 as number,\r\n    cardsTotalCount: 0 as number,\r\n    packUserId: null as string | null,\r\n    cardsPack_id: '',\r\n    init: false\r\n}\r\n\r\nexport const cardsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {\r\n    switch (action.type) {\r\n        case 'cards/FETCH-CARDS': {\r\n            return {\r\n                ...state,\r\n                cards: action.cards,\r\n                packUserId: action.packUserId,\r\n                cardsPack_id: action.cardsPack_id,\r\n                currentPage: action.currentPage,\r\n                pageCount: action.pageCount,\r\n                cardsTotalCount: action.cardsTotalCount,\r\n            }\r\n        }\r\n        case 'cards/SET-INIT': {\r\n            return {...state, init: true}\r\n        }\r\n        case \"cards/SET-PAGES\": {\r\n            return {\r\n                ...state,\r\n                pages: action.pages\r\n            }\r\n        }\r\n        case \"cards/SET-QUERY-SORT-CARDS\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    sortCards: action.sortCards\r\n                }\r\n            }\r\n        }\r\n        case \"cards/SET-QUERY-PAGE-COUNT\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    pageCount: action.pageCount\r\n                }\r\n            }\r\n        }\r\n        case \"cards/SET-CURRENT-PAGE\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    page: action.page\r\n                }\r\n            }\r\n        }\r\n        case \"cards/SET-MIN-MAX-GRADE\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    min: action.min,\r\n                    max: action.max\r\n                }\r\n            }\r\n        }\r\n        case \"cards/SET-QUESTION-SEARCH\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    cardQuestion: action.question\r\n                }\r\n            }\r\n        }\r\n        case \"cards/SET-ANSWER-SEARCH\": {\r\n            return {\r\n                ...state,\r\n                queryParamsObject: {\r\n                    ...state.queryParamsObject,\r\n                    cardAnswer: action.answer\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const fetchCards = (cards: Array<CardType>, packUserId: string, cardsPack_id: string, currentPage: number, pageCount: number, cardsTotalCount: number) => {\r\n    return {type: 'cards/FETCH-CARDS', cards, packUserId, cardsPack_id, currentPage, pageCount, cardsTotalCount} as const\r\n}\r\nexport const setInit = () => {\r\n    return {type: 'cards/SET-INIT'} as const\r\n}\r\nexport const setPages = (pages: number) => {\r\n    return {type: 'cards/SET-PAGES', pages} as const\r\n}\r\nexport const setSortCards = (sortCards: '1grade' | '0grade') => {\r\n    return {type: 'cards/SET-QUERY-SORT-CARDS', sortCards} as const\r\n}\r\nexport const setPageCount = (pageCount: string) => {\r\n    return {type: 'cards/SET-QUERY-PAGE-COUNT', pageCount} as const\r\n}\r\nexport const setCurrentPage = (page: string) => {\r\n    return {type: 'cards/SET-CURRENT-PAGE', page} as const\r\n}\r\nexport const setMinMaxGrade = (min: string, max: string) => {\r\n    return {type: 'cards/SET-MIN-MAX-GRADE', min, max} as const\r\n}\r\nexport const setQuestionSearch = (question: string) => {\r\n    return {type: 'cards/SET-QUESTION-SEARCH', question} as const\r\n}\r\nexport const setAnswerSearch = (answer: string) => {\r\n    return {type: 'cards/SET-ANSWER-SEARCH', answer} as const\r\n}\r\n\r\n//thunks\r\nexport const fetchCardsTC = (cardsPack_id: string) => async (dispatch: Dispatch<ActionsType, any>, getState: () => AppRootStateType) => {\r\n    try {\r\n        //getting obj with optional query params from state which is empty by default\r\n        const optionalsObj = getState().cards.queryParamsObject\r\n\r\n        //if we enter another card pack we reset all optional query params\r\n        if (cardsPack_id !== getState().cards.cardsPack_id) {\r\n            for (const property in optionalsObj) {\r\n                optionalsObj[property] = ''\r\n            }\r\n        }\r\n\r\n        //creating optional querystring with optional params\r\n        let optionalString = ''\r\n        for (const property in optionalsObj) {\r\n            if (optionalsObj[property] !== '')\r\n                optionalString = optionalString.concat(`&${property}=${optionalsObj[property]}`)\r\n        }\r\n\r\n        //fetch request with all id and optional query params if they are present\r\n        const response = await cardsAPI.getCards(cardsPack_id, optionalString)\r\n\r\n        //setting necessary data into state\r\n        dispatch(fetchCards(response.data.cards, response.data.packUserId, cardsPack_id, response.data.page, response.data.pageCount, response.data.cardsTotalCount))\r\n\r\n        //setting pages count depending on total amount of cards and pageCount value\r\n        dispatch(setPages(response.data.cardsTotalCount % response.data.pageCount !== 0 || response.data.cardsTotalCount === 0\r\n            ? Math.floor(response.data.cardsTotalCount / response.data.pageCount + 1)\r\n            : response.data.cardsTotalCount / response.data.pageCount))\r\n    } catch (e) {\r\n        console.log(e)\r\n    } finally {\r\n        dispatch(setInit())\r\n    }\r\n}\r\n\r\nexport const addCardTC = (data: RequestAddCardType) => async (dispatch: Dispatch<ActionsType, any>) => {\r\n    try {\r\n        await cardsAPI.addCard(data)\r\n        dispatch(fetchCardsTC(data.card.cardsPack_id))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const deleteCardTC = (id: string, cardsPack_id: string) => async (dispatch: Dispatch<ActionsType, any>, getState: () => AppRootStateType) => {\r\n    try {\r\n        await cardsAPI.deleteCard(id)\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n\r\nexport const editCardTC = (data: RequestUpdateCardType, cardsPack_id: string) => async (dispatch: Dispatch<ActionsType, any>) => {\r\n    try {\r\n        await cardsAPI.updateCard(data)\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    } catch (e) {\r\n        console.log(e)\r\n    }\r\n}\r\n","export const formatDate = (date: string) => {\r\n    let day = date.slice(8, 10)\r\n    let month = date.slice(5, 7)\r\n    let year = date.slice(0, 4)\r\n    return `${day}.${month}.${year}`\r\n}","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AddCardDataType} from \"../../../1-main/3-dal/cardsAPI\";\r\nimport s from \"../Modal.module.css\";\r\n\r\nexport const ModalWithTwoInput = (props: ModalWithTwoInputPropsType) => {\r\n    const [questionValue, setQuestionValue] = useState('')\r\n    const [answerValue, setAnswerValue] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const sendAddCard = () => {\r\n        const card: AddCardDataType = {\r\n            cardsPack_id: props.cardsPack_id,\r\n            question: questionValue,\r\n            answer: answerValue\r\n        }\r\n        dispatch(props.action({card}))\r\n        props.setModalActive(false)\r\n        setQuestionValue('')\r\n        setAnswerValue('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.childrenContainer}>\r\n            <h2>Card info</h2>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Question</legend>\r\n                <input type=\"text\" value={questionValue}\r\n                       onChange={(e) => setQuestionValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Answer</legend>\r\n                <input type=\"text\" value={answerValue}\r\n                       onChange={(e) => setAnswerValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <div className={s.btnContainer}>\r\n                <button className={s.cancelBtn} onClick={() => props.setModalActive(false)}>Cancel</button>\r\n                <button className={s.saveBtn} onClick={sendAddCard}>Save</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype ModalWithTwoInputPropsType = {\r\n    cardsPack_id: string\r\n    action: Function\r\n    setModalActive: Dispatch<SetStateAction<boolean>>\r\n}","import React, {Dispatch, SetStateAction, useState} from \"react\";\r\nimport s from \"../Modal.module.css\";\r\n\r\nexport const ModalForCardEditing = (props: ModalForCardEditingPropsType) => {\r\n    const [questionValue, setQuestionValue] = useState<string | null>(null)\r\n    const [answerValue, setAnswerValue] = useState<string | null>(null)\r\n\r\n    const updateCardInput = () => {\r\n        props.action(questionValue, answerValue)\r\n        props.setModalActive(false)\r\n        setQuestionValue(null)\r\n        setAnswerValue(null)\r\n    }\r\n\r\n    return (\r\n        <div className={s.childrenContainer}>\r\n            <h2>Card info</h2>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Question</legend>\r\n                <input type=\"text\" value={questionValue === null ? props.question : questionValue}\r\n                       onChange={(e) => setQuestionValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <fieldset className={s.fieldset}>\r\n                <legend>Answer</legend>\r\n                <input type=\"text\" value={answerValue === null ? props.answer : answerValue}\r\n                       onChange={(e) => setAnswerValue(e.currentTarget.value)}/>\r\n            </fieldset>\r\n            <div className={s.btnContainer}>\r\n                <button className={s.cancelBtn} onClick={() => props.setModalActive(false)}>Cancel</button>\r\n                <button className={s.saveBtn} onClick={updateCardInput}>Save</button>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n// types\r\ntype ModalForCardEditingPropsType = {\r\n    cardsPack_id: string\r\n    action: Function\r\n    setModalActive: Dispatch<SetStateAction<boolean>>\r\n    question: string | number | readonly string[] | undefined\r\n    answer: string | number | readonly string[] | undefined\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    addCardTC,\r\n    CardType,\r\n    deleteCardTC,\r\n    editCardTC,\r\n    fetchCardsTC,\r\n    setAnswerSearch,\r\n    setCurrentPage,\r\n    setMinMaxGrade,\r\n    setPageCount,\r\n    setQuestionSearch,\r\n    setSortCards\r\n} from \"../../1-main/2-bll/cardsReducer\";\r\nimport {AppRootStateType} from \"../../1-main/2-bll/store\";\r\nimport styles from './Cards.module.css'\r\nimport {useParams} from \"react-router-dom\";\r\nimport {UpdateCardDataType} from \"../../1-main/3-dal/cardsAPI\";\r\nimport {SearchBar} from \"../../1-main/1-ui/common/SearchBar\";\r\nimport {Pagination} from \"../../1-main/1-ui/common/Pagination\";\r\nimport {formatDate} from \"../../1-main/1-ui/utils/formatDate\";\r\nimport {RangeFilter} from \"../../1-main/1-ui/common/RangeFilter\";\r\nimport Modal from \"../5-modal/Modal\";\r\nimport {ModalWithTwoInput} from \"../5-modal/children/ModalWithTwoInput\";\r\nimport {ModalForCardEditing} from \"../5-modal/children/ModalForCardEditing\";\r\n\r\n\r\nexport function Cards() {\r\n    const dispatch = useDispatch()\r\n    const cards = useSelector<AppRootStateType, CardType[]>(state => state.cards.cards)\r\n    const init = useSelector<AppRootStateType, boolean>(state => state.cards.init)\r\n    const loggedUserId = useSelector<AppRootStateType, string>(state => state.auth.userId)\r\n    const packUserId = useSelector<AppRootStateType, string | null>(state => state.cards.packUserId)\r\n    const pages = useSelector<AppRootStateType, number>(state => state.cards.pages)\r\n    const currentPage = useSelector<AppRootStateType, number>(state => state.cards.currentPage)\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.cards.pageCount)\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsTotalCount)\r\n    const [minValue, setMinValue] = useState(0)\r\n    const [maxValue, setMaxValue] = useState(5)\r\n    const searchOptions = ['by question', 'by answer']\r\n    const [searchOption, setSearchOption] = useState(searchOptions[0])\r\n    const [searchValue, setSearchValue] = useState('')\r\n    const {cardsPack_id} = useParams<{ cardsPack_id: string }>()\r\n    const [editModalActive, setEditModalActive] = useState(false)\r\n    const [modalActive, setModalActive] = useState(false)\r\n    const [cardId, setCardId] = useState<string | null>(null)\r\n    const [packId, setPackId] = useState<string | null>(null)\r\n    const [question, setQuestion] = useState<string | number | readonly string[] | undefined>('')\r\n    const [answer, setAnswer] = useState<string | number | readonly string[] | undefined>('')\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }, [dispatch, cardsPack_id])\r\n\r\n    if (!init) {\r\n        return <div>Loading</div>\r\n    }\r\n\r\n    //CRUD on cards\r\n    const addCard = () => {\r\n        setModalActive(true)\r\n    }\r\n\r\n    const deleteCard = (cardId: string, packId: string) => {\r\n        return () => {\r\n            dispatch(deleteCardTC(cardId, packId))\r\n        }\r\n    }\r\n\r\n    const editPackRequestHandler = (question: string, answer: string) => {\r\n        if (cardId) {\r\n            let card: UpdateCardDataType = {\r\n                _id: cardId,\r\n                question: question,\r\n                answer: answer\r\n            }\r\n            packId && dispatch(editCardTC({card}, packId))\r\n        }\r\n    }\r\n    const editPackModalHandler = (cardId?: string, packId?: string, question?: string, answer?: string) => {\r\n        cardId && setCardId(cardId)\r\n        packId && setPackId(packId)\r\n        question && setQuestion(question)\r\n        answer && setAnswer(answer)\r\n        setEditModalActive(true)\r\n    }\r\n    //end CRUD on cards\r\n\r\n    //cardsJSXElements\r\n    let cardsElements = cards.map(card => {\r\n        return <tr key={card._id}>\r\n            <td>{card.question}</td>\r\n            <td>{card.answer}</td>\r\n            <td>{formatDate(card.updated)}</td>\r\n            <td>{card.grade}</td>\r\n            {loggedUserId === packUserId ? <td>\r\n                <button onClick={deleteCard(card._id, card.cardsPack_id)}>Delete</button>\r\n                <button\r\n                    onClick={() => editPackModalHandler(card._id, card.cardsPack_id, card.question, card.answer)}>Edit\r\n                </button>\r\n            </td> : <td></td>}\r\n        </tr>\r\n    })\r\n    //end cardsJSXElements\r\n\r\n    //sort by grade\r\n    const sortHighGrade = () => {\r\n        dispatch(setSortCards('1grade'))\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }\r\n    const sortLowGrade = () => {\r\n        dispatch(setSortCards('0grade'))\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }\r\n    //end sort by grade\r\n\r\n    //pagination\r\n    //pageCount -> how many items on page\r\n    const setPageCountCallback = (pageCount: string) => {\r\n        return () => {\r\n            dispatch(setPageCount(pageCount))\r\n            dispatch(fetchCardsTC(cardsPack_id))\r\n        }\r\n    }\r\n    //end pageCount -> how many items on page\r\n    //pages\r\n    const setPage = (page: number) => {\r\n        return () => {\r\n            dispatch(setCurrentPage(page.toString()))\r\n            dispatch(fetchCardsTC(cardsPack_id))\r\n        }\r\n    }\r\n    //end pages\r\n    //end pagination\r\n\r\n    //range\r\n    const onChangeRangeDouble = ([num1, num2]: number[]) => {\r\n        setMinValue(num1)\r\n        setMaxValue(num2)\r\n    }\r\n\r\n    const onClickGradeRangeFilter = () => {\r\n        dispatch(setMinMaxGrade(minValue.toString(), maxValue.toString()))\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }\r\n    //end range\r\n\r\n    //search\r\n    const onChangeSearchValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setSearchValue(e.currentTarget.value)\r\n    }\r\n    const onClickSearch = () => {\r\n        if (searchOption === 'by question') {\r\n            dispatch(setAnswerSearch(''))\r\n            dispatch(setQuestionSearch(searchValue))\r\n            dispatch(fetchCardsTC(cardsPack_id))\r\n        } else {\r\n            dispatch(setQuestionSearch(''))\r\n            dispatch(setAnswerSearch(searchValue))\r\n            dispatch(fetchCardsTC(cardsPack_id))\r\n        }\r\n    }\r\n    const onClickReset = () => {\r\n        setSearchValue('')\r\n        dispatch(setAnswerSearch(''))\r\n        dispatch(setQuestionSearch(''))\r\n        dispatch(fetchCardsTC(cardsPack_id))\r\n    }\r\n    //end search\r\n    return (\r\n        <div className={styles.tableContainer}>\r\n            <SearchBar searchValue={searchValue}\r\n                       onChangeSearchValue={onChangeSearchValue}\r\n                       onClickSearch={onClickSearch}\r\n                       onClickReset={onClickReset}\r\n                       searchOptions={searchOptions}\r\n                       searchOption={searchOption}\r\n                       setSearchOption={setSearchOption}\r\n            />\r\n            <RangeFilter minValue={minValue}\r\n                         maxValue={maxValue}\r\n                         onChangeRangeDouble={onChangeRangeDouble}\r\n                         onClickGradeRangeFilter={onClickGradeRangeFilter}\r\n                         min={0}\r\n                         max={5}\r\n                         step={1}\r\n            />\r\n            <table className={styles.table}>\r\n                <thead>\r\n                <tr>\r\n                    <th>Question</th>\r\n                    <th>Answer</th>\r\n                    <th>Updated</th>\r\n                    <th>Grade <button onClick={sortHighGrade}>high</button>\r\n                        <button onClick={sortLowGrade}>low</button>\r\n                    </th>\r\n                    <th>{loggedUserId === packUserId && <button onClick={addCard}>Add</button>}Actions</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {cardsElements}\r\n                </tbody>\r\n            </table>\r\n            <Pagination pageCountArray={['1', '5', '10', '20']}\r\n                        setPageCountCallback={setPageCountCallback}\r\n                        pages={pages}\r\n                        setPage={setPage}\r\n                        totalItems={cardsTotalCount}\r\n                        currentPage={currentPage}\r\n                        pageSize={pageCount}\r\n            />\r\n            <Modal active={modalActive} setActive={setModalActive}>\r\n                <ModalWithTwoInput cardsPack_id={cardsPack_id}\r\n                                   action={addCardTC}\r\n                                   setModalActive={setModalActive}/>\r\n            </Modal>\r\n            <Modal active={editModalActive} setActive={setEditModalActive}>\r\n                <ModalForCardEditing cardsPack_id={cardsPack_id}\r\n                                     question={question}\r\n                                     answer={answer}\r\n                                     action={editPackRequestHandler}\r\n                                     setModalActive={setEditModalActive}/>\r\n            </Modal>\r\n        </div>\r\n\r\n    )\r\n}","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Test from '../../../2-features/0-test/Test';\r\nimport Error404 from '../../../2-features/1-auth/2-signUp/sign-up-common/Error404/Error404';\r\nimport Login from '../../../2-features/1-auth/1-login/Login';\r\nimport SignUp from '../../../2-features/1-auth/2-signUp/SignUp';\r\nimport Profile from '../../../2-features/2-profile/Profile';\r\nimport ResetPassword from '../../../2-features/restore/1-resetPassword/ResetPassword';\r\nimport NewPassword from '../../../2-features/restore/2-newPassword/NewPassword';\r\nimport CheckEmail from \"../../../2-features/restore/1-resetPassword/CheckEmail\";\r\nimport Packs from \"../../../2-features/3-packs/Packs\";\r\nimport {Cards} from \"../../../2-features/3-cards/Cards\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    SIGN_UP: '/signup',\r\n    PROFILE: '/profile',\r\n    PACKS: '/packs',\r\n    RESET_PASSWORD: '/resetPassword',\r\n    CHECK_EMAIL: '/checkEmail',\r\n    NEW_PASSWORD: '/newPassword/:token',\r\n    CARDS: '/cards/:cardsPack_id',\r\n    TEST: '/test'\r\n}\r\n\r\nfunction Routes() {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.SIGN_UP} render={() => <SignUp/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Packs/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Cards/>}/>\r\n                <Route path={PATH.RESET_PASSWORD} render={() => <ResetPassword/>}/>\r\n                <Route path={PATH.CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={'*'} render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport style from './CustomNavLink.module.css'\r\n\r\ntype CustomNavLinkPropsType = {\r\n    title: string,\r\n    to: string\r\n}\r\n\r\nconst CustomNavLink = (props: CustomNavLinkPropsType) => {\r\n    return (\r\n        <div className={style.navLink}>\r\n            <NavLink to={props.to}>{props.title}</NavLink>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default CustomNavLink;","import React from 'react';\r\nimport style from './Header.module.css'\r\nimport {PATH} from '../routes/Routes';\r\nimport CustomNavLink from '../../../2-features/1-auth/2-signUp/sign-up-common/CustomNavLink/CustomNavLink';\r\nimport SuperButton from '../../../2-features/1-auth/2-signUp/sign-up-common/SuperButton/SuperButton';\r\nimport {useDispatch} from 'react-redux';\r\nimport {logoutSuccess} from '../../2-bll/authReducer';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    const dispatch = useDispatch()\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutSuccess())\r\n    }\r\n\r\n    return (\r\n        <div className={style.header}>\r\n            <CustomNavLink title={'profile'} to={PATH.PROFILE}/>\r\n            <CustomNavLink title={'packs'} to={PATH.PACKS}/>\r\n            {/*<CustomNavLink title={'sign-up'} to={PATH.SIGN_UP}/>*/}\r\n            {/*<CustomNavLink title={'login'} to={PATH.LOGIN}/>*/}\r\n            <CustomNavLink title={'change password'} to={PATH.RESET_PASSWORD}/>\r\n            {/*<CustomNavLink title={'cards'} to={PATH.CARDS}/>*/}\r\n            <CustomNavLink title={'test'} to={PATH.TEST}/>\r\n            <NavLink to={'/login'}><SuperButton color={\"blue\"} onClick={logoutHandler}>logout</SuperButton></NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport Error404 from '../../../2-features/1-auth/2-signUp/sign-up-common/Error404/Error404';\r\nimport Login from '../../../2-features/1-auth/1-login/Login';\r\nimport SignUp from '../../../2-features/1-auth/2-signUp/SignUp';\r\nimport ResetPassword from '../../../2-features/restore/1-resetPassword/ResetPassword';\r\nimport NewPassword from '../../../2-features/restore/2-newPassword/NewPassword';\r\nimport CheckEmail from \"../../../2-features/restore/1-resetPassword/CheckEmail\";\r\nimport {PATH} from \"./Routes\";\r\n\r\nfunction UnauthorizedRoutes() {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.SIGN_UP} render={() => <SignUp/>}/>\r\n                <Route path={PATH.RESET_PASSWORD} render={() => <ResetPassword/>}/>\r\n                <Route path={PATH.CHECK_EMAIL} render={() => <CheckEmail/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                {/*routes that are available only if you are authorized*/}\r\n                <Route path={PATH.PROFILE} render={() => <Login/>}/>\r\n                <Route path={PATH.PACKS} render={() => <Login/>}/>\r\n                <Route path={PATH.CARDS} render={() => <Login/>}/>\r\n                <Route path={PATH.TEST} render={() => <Login/>}/>\r\n                <Route path={'*'} render={() => <Error404/>}/>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UnauthorizedRoutes\r\n","import React from 'react';\r\nimport Header from './header/Header';\r\nimport Routes from './routes/Routes';\r\nimport {AppRootStateType} from '../2-bll/store';\r\nimport {useSelector} from 'react-redux';\r\nimport UnauthorizedRoutes from \"./routes/UnauthorizedRoutes\";\r\n\r\nfunction Main() {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.auth.isAuth)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.auth.isInitialized)\r\n\r\n    if (!isInitialized) {\r\n        return <div>Loading</div>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                isAuth\r\n                    ?\r\n                    <div>\r\n                        <Header/>\r\n                        <Routes/>\r\n                    </div>\r\n                    :\r\n                    <div>\r\n                        <UnauthorizedRoutes/>\r\n                    </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Main;\r\n","import React, {useEffect} from 'react';\r\nimport './App.module.css';\r\nimport {useDispatch} from 'react-redux';\r\nimport Main from './Main';\r\nimport {getMe} from '../2-bll/authReducer';\r\n\r\n\r\nconst App = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(getMe())\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Main />\r\n        </div>\r\n    )\r\n}\r\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {authReducer} from './authReducer';\r\nimport {profileReducer} from './profileReducer';\r\nimport {restoreReducer} from './restoreReducer';\r\nimport {signUpReducer} from \"./signUpReducer\";\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {cardsReducer} from \"./cardsReducer\";\r\nimport {packsReducer} from \"./packsReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    profile: profileReducer,\r\n    restore: restoreReducer,\r\n    signUp: signUpReducer,\r\n    cards: cardsReducer,\r\n    packs: packsReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n\r\n//@ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './1-main/1-ui/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from './1-main/2-bll/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App/>\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginBlock\":\"Login_loginBlock__--uzg\",\"loginList\":\"Login_loginList__1unfP\",\"loginTitle\":\"Login_loginTitle__2XPJ2\",\"loginInput\":\"Login_loginInput__1STqW\",\"rememberBlock\":\"Login_rememberBlock__1fmrK\",\"forgotLink\":\"Login_forgotLink__ho-ZO\",\"forgotLinkActive\":\"Login_forgotLinkActive__1BuvV\",\"btnBlock\":\"Login_btnBlock__f4D2u\",\"loginText\":\"Login_loginText__1mcpT\",\"signUpLink\":\"Login_signUpLink__1F2wY\",\"signUpLinkActive\":\"Login_signUpLinkActive__3Ber0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"restoreContainer\":\"Restore_restoreContainer__pNOwt\",\"restoreForm\":\"Restore_restoreForm__2q58P\",\"headers\":\"Restore_headers__1aMo9\",\"error\":\"Restore_error__2vHkR\",\"buttonsContainer\":\"Restore_buttonsContainer__1MLiq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableContainer\":\"Cards_tableContainer__t1_wU\",\"table\":\"Cards_table__18PZ6\",\"rangeContainer\":\"Cards_rangeContainer__228OQ\",\"pagesFooter\":\"Cards_pagesFooter__q1mE3\",\"openBtn\":\"Cards_openBtn__2IuWw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"signUpContainer\":\"SignUp_signUpContainer__3gp3q\",\"signUpForm\":\"SignUp_signUpForm__17AjK\",\"error\":\"SignUp_error__2gvSH\",\"buttonsContainer\":\"SignUp_buttonsContainer__Thwab\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__h-veD\",\"white\":\"SuperButton_white__3peMs\",\"blue\":\"SuperButton_blue__5JLOT\",\"red\":\"SuperButton_red__gbQyz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Error404_container__3qUyK\",\"main\":\"Error404_main__2H8Cg\",\"fof\":\"Error404_fof__27oWq\",\"type\":\"Error404_type__36aHc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"group\":\"SuperInputText_group__2S800\",\"errorInput\":\"SuperInputText_errorInput__34Qzl\",\"error\":\"SuperInputText_error__jx1Vx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"SuperCheckbox_checkbox__1ar1v\",\"spanClassName\":\"SuperCheckbox_spanClassName__25qhW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchInput\":\"SearchBar_searchInput__179oD\",\"letterInput\":\"SearchBar_letterInput__Q5Bee\"};"],"sourceRoot":""}